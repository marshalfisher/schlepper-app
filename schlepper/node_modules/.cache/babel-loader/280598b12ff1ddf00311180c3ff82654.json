{"ast":null,"code":"import { combineReducers } from 'redux';\nimport storage from 'redux-persist/lib/storage'; //reducer to authenticate\n\nconst auth = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'AUTH_TRUE':\n      {\n        return { ...state,\n          auth: true\n        };\n      }\n\n    case 'AUTH_FALSE':\n      {\n        return { ...state,\n          auth: false\n        };\n      }\n\n    default:\n      return state;\n  }\n}; //sets user\n\n\nconst user = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CHANGE_USER':\n      {\n        return { ...state,\n          user: action.text\n        };\n      }\n\n    default:\n      return state;\n  }\n}; //changes token\n\n\nconst token = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CHANGE_TOKEN':\n      {\n        return { ...state,\n          token: action.text\n        };\n      }\n\n    default:\n      return state;\n  }\n}; //changes collection\n\n\nconst collection = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CHANGE_COLLECTION':\n      {\n        return { ...state,\n          collection: [...action.array]\n        };\n      }\n\n    default:\n      return state;\n  }\n}; // changes wants \n\n\nconst wants = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CHANGE_WANTS':\n      {\n        return { ...state,\n          wants: [...action.array]\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst viewedUser = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CHANGE_VIEWED_USER':\n      {\n        return { ...state,\n          viewedUser: action.username\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst eyedAlbum = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CHANGE_EYED_ALBUM':\n      {\n        return { ...state,\n          eyedAlbum: action.album\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst offer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CHANGE_OFFER':\n      {\n        return { ...state,\n          offer: action.album\n        };\n      }\n\n    default:\n      return state;\n  }\n}; // Combining both reducers\n\n\nconst appReducer = combineReducers({\n  auth,\n  user,\n  token,\n  collection,\n  wants,\n  viewedUser,\n  eyedAlbum,\n  offer\n});\n\nconst reducers = (state, action) => {\n  if (action.type === 'LOG_OUT') {\n    //storage.removeItem('persist:root')\n    return appReducer(undefined, action);\n  }\n\n  return appReducer(state, action);\n};\n\nexport default reducers;","map":{"version":3,"sources":["/mnt/c/Users/marsh/Documents/Codeworks/projects/schlepper-app/schlepper/src/reducers.js"],"names":["combineReducers","storage","auth","state","action","type","user","text","token","collection","array","wants","viewedUser","username","eyedAlbum","album","offer","appReducer","reducers","undefined"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\n//reducer to authenticate\r\nconst auth = (state = false, action) => {\r\n  switch (action.type) {\r\n  case 'AUTH_TRUE' : {\r\n      return {\r\n          ...state,\r\n          auth: true,\r\n      }}\r\n\r\n  case 'AUTH_FALSE' : {\r\n    return {\r\n        ...state,\r\n        auth: false,\r\n    }}\r\n  default : return state;\r\n  }\r\n};\r\n\r\n//sets user\r\nconst user = (state = '', action) =>{\r\n  switch (action.type) {\r\n    case 'CHANGE_USER':{\r\n        return {\r\n          ...state,\r\n          user: action.text,\r\n        }\r\n      }\r\n      default : return state;\r\n  } \r\n};\r\n\r\n//changes token\r\nconst token = (state = '', action) =>{\r\n  switch (action.type) {\r\n    case 'CHANGE_TOKEN':{\r\n        return {\r\n          ...state,\r\n          token: action.text,\r\n        }\r\n      }\r\n      default : return state;\r\n  } \r\n};\r\n\r\n//changes collection\r\nconst collection = (state = [], action) =>{\r\n  switch (action.type) {\r\n    case 'CHANGE_COLLECTION':{\r\n        return {\r\n          ...state,\r\n          collection: [...action.array],\r\n        }\r\n      }\r\n      default : return state;\r\n  } \r\n};\r\n// changes wants \r\nconst wants = (state = [], action) =>{\r\n  switch (action.type) {\r\n    case 'CHANGE_WANTS':{\r\n        return {\r\n          ...state,\r\n          wants: [...action.array],\r\n        }\r\n      }\r\n      default : return state;\r\n  } \r\n};\r\n\r\nconst viewedUser = (state = '', action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_VIEWED_USER':{\r\n        return {\r\n          ...state,\r\n          viewedUser: action.username,\r\n        }\r\n      }\r\n      default : return state;\r\n  } \r\n};\r\n\r\nconst eyedAlbum = (state = '', action) => {\r\n  switch(action.type) {\r\n    case 'CHANGE_EYED_ALBUM' : {\r\n      return {\r\n        ...state,\r\n        eyedAlbum: action.album\r\n      }\r\n    }\r\n    default : return state;\r\n  }\r\n};\r\n\r\nconst offer = (state = '', action) => {\r\n  switch(action.type) {\r\n    case 'CHANGE_OFFER' : {\r\n      return {\r\n        ...state,\r\n        offer: action.album\r\n      }\r\n    }\r\n    default : return state;\r\n  }\r\n};\r\n\r\n\r\n// Combining both reducers\r\nconst appReducer = combineReducers({\r\n  auth,\r\n  user,\r\n  token,\r\n  collection,\r\n  wants,\r\n  viewedUser,\r\n  eyedAlbum,\r\n  offer,\r\n});\r\n\r\nconst reducers = (state, action) => {\r\n  if (action.type === 'LOG_OUT') {\r\n    //storage.removeItem('persist:root')\r\n    return appReducer(undefined, action)\r\n  }\r\n  return appReducer(state, action)\r\n};\r\n\r\nexport default reducers;\r\n"]},"metadata":{},"sourceType":"module"}