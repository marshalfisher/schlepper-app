{"ast":null,"code":"import { combineReducers } from 'redux'; // //reducer to authenticate\n\nconst auth = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'AUTH_TRUE':\n      {\n        return {\n          auth: true\n        };\n      }\n\n    case 'AUTH_FALSE':\n      {\n        return {\n          auth: false\n        };\n      }\n\n    default:\n      return state;\n  }\n}; //sets user\n\n\nconst user = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CHANGE_USER':\n      {\n        return action.text;\n      }\n\n    default:\n      return state;\n  }\n}; // //changes token\n\n\nconst token = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CHANGE_TOKEN':\n      {\n        return {\n          token: action.text\n        };\n      }\n\n    default:\n      return state;\n  }\n}; //changes collection\n\n\nconst collection = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CHANGE_COLLECTION':\n      {\n        return {\n          collection: [...action.array]\n        };\n      }\n\n    default:\n      return state;\n  }\n}; // // changes wants\n\n\nconst wants = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CHANGE_WANTS':\n      {\n        return {\n          wants: [...action.array]\n        };\n      }\n\n    default:\n      return state;\n  }\n}; //sets user for communication purposes\n\n\nconst viewedUser = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CHANGE_VIEWED_USER':\n      {\n        return action.username;\n      }\n\n    default:\n      return state;\n  }\n}; //sets album for communication purposes\n\n\nconst eyedAlbum = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CHANGE_EYED_ALBUM':\n      {\n        return {\n          eyedAlbum: action.album\n        };\n      }\n\n    default:\n      return state;\n  }\n}; //sets album offered in trade (for message)\n\n\nconst offer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CHANGE_OFFER':\n      {\n        return {\n          offer: action.album\n        };\n      }\n\n    default:\n      return state;\n  }\n}; // Combining both reducers\n\n\nconst appReducer = combineReducers({\n  auth,\n  user,\n  token,\n  collection,\n  wants,\n  viewedUser,\n  eyedAlbum,\n  offer\n}); //extra code here to handle log out\n\nconst reducers = (state, action) => {\n  if (action.type === 'LOG_OUT') {\n    return appReducer(undefined, action);\n  }\n\n  return appReducer(state, action);\n};\n\nexport default reducers;","map":{"version":3,"sources":["/mnt/c/Users/marsh/Documents/Codeworks/projects/schlepper-app/schlepper/src/redux/reducers.ts"],"names":["combineReducers","auth","state","action","type","user","text","token","collection","array","wants","viewedUser","username","eyedAlbum","album","offer","appReducer","reducers","undefined"],"mappings":"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","sourcesContent":["import { combineReducers, Reducer, AnyAction } from 'redux';\r\n\r\n// //reducer to authenticate\r\nconst auth = (state: boolean = false, action: AnyAction) => {\r\n  switch (action.type) {\r\n    case 'AUTH_TRUE': {\r\n      return {\r\n        auth: true,\r\n      };\r\n    }\r\n    case 'AUTH_FALSE': {\r\n      return {\r\n        auth: false,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//sets user\r\n\r\nconst user = (state: string = '', action: AnyAction) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_USER': {\r\n      return action.text;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// //changes token\r\nconst token = (state: string = '', action: AnyAction) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_TOKEN': {\r\n      return {\r\n        token: action.text,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//changes collection\r\nconst collection = (state: object[] = [], action: AnyAction) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_COLLECTION': {\r\n      return {\r\n        collection: [...action.array],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// // changes wants\r\nconst wants = (state: object[] = [], action: AnyAction) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_WANTS': {\r\n      return {\r\n        wants: [...action.array],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//sets user for communication purposes\r\nconst viewedUser = (state: string = '', action: AnyAction) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_VIEWED_USER': {\r\n      return action.username;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//sets album for communication purposes\r\nconst eyedAlbum = (state: string = '', action: AnyAction) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_EYED_ALBUM': {\r\n      return { eyedAlbum: action.album };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//sets album offered in trade (for message)\r\nconst offer = (state: string = '', action: AnyAction) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_OFFER': {\r\n      return { offer: action.album };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Combining both reducers\r\nconst appReducer: Reducer = combineReducers({\r\n  auth,\r\n  user,\r\n  token,\r\n  collection,\r\n  wants,\r\n  viewedUser,\r\n  eyedAlbum,\r\n  offer,\r\n});\r\n\r\n//extra code here to handle log out\r\nconst reducers: Reducer = (state, action: AnyAction) => {\r\n  if (action.type === 'LOG_OUT') {\r\n    return appReducer(undefined, action);\r\n  }\r\n  return appReducer(state, action);\r\n};\r\n\r\nexport default reducers;\r\nexport type RootState = ReturnType<typeof appReducer>;\r\n"]},"metadata":{},"sourceType":"module"}