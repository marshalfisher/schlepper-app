{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/marsh/Documents/Codeworks/projects/schlepper-app/schlepper/src/components/messages/messages.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks';\nimport { changeEyedAlbum, changeViewedUser, changeOffer } from '../../redux/actions';\nimport { useNavigate } from 'react-router-dom';\nimport apiService from '../../APIservice';\nimport MessageMini from '../search-minis/message-mini/message-mini';\nimport './messages.css';\nimport { gapi } from 'gapi-script';\nimport moment from 'moment';\nimport Map from '../map/map';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MessagesTab = () => {\n  _s();\n\n  //state\n  const [messages, changeMessages] = useState([]);\n  const [trading, changeTrading] = useState(false);\n  const [tradeStatus, changeTradeStatus] = useState(false);\n  const [tradeInfo, changeTradeInfo] = useState(null);\n  const [albumInfo1, changeAlbumInfo1] = useState(null);\n  const [albumInfo2, changeAlbumInfo2] = useState(null);\n  const [date, setDate] = useState('');\n  const [location, setLocation] = useState('');\n  const [calendarLink, setCalendarLink] = useState('');\n  const [position, setPosition] = useState({\n    latitude: '',\n    longitude: ''\n  }); //redux\n\n  const user = useAppSelector(state => state.user);\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const handleChange = (value, setter) => {\n    setter(value);\n  };\n\n  const onSearchLocation = e => {\n    setLocation(e.result.place_name);\n  }; //navigates to 'reply'\n\n\n  function handleClick(message) {\n    dispatch(changeViewedUser(message.fromUser));\n    dispatch(changeEyedAlbum(message.album));\n    dispatch(changeOffer(message.offeredAlbum));\n    navigate('/reply');\n  } //deletes a message\n\n\n  async function handleDelete(message) {\n    await apiService.deleteMessage(message.id);\n    const messageArray = await apiService.getMessages(user);\n    messageArray.sort(message => message.id);\n    changeMessages(messageArray);\n  } //sets state to make a trade\n\n\n  async function handleTrade(message) {\n    changeTrading(true);\n    changeTradeInfo(message);\n    const info1 = await apiService.getAlbumInfo(message.offeredAlbum);\n    changeAlbumInfo1(info1);\n    const info2 = await apiService.getAlbumInfo(message.album);\n    changeAlbumInfo2(info2);\n  } //sends a trade offer to the server\n\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    const tradeObject = {\n      user1: tradeInfo === null || tradeInfo === void 0 ? void 0 : tradeInfo.toUser,\n      user2: tradeInfo === null || tradeInfo === void 0 ? void 0 : tradeInfo.fromUser,\n      user1offer: tradeInfo === null || tradeInfo === void 0 ? void 0 : tradeInfo.offeredAlbum,\n      user2offer: tradeInfo === null || tradeInfo === void 0 ? void 0 : tradeInfo.album,\n      location: location,\n      additional: date\n    };\n    await apiService.makeTrade(tradeObject);\n    const resUserData = await apiService.getUser({\n      username: tradeInfo === null || tradeInfo === void 0 ? void 0 : tradeInfo.fromUser\n    });\n    addEventToCalendar(resUserData.email);\n    changeTradeStatus(true);\n  } // Ad event to Google Calendar\n\n\n  const addEventToCalendar = email => {\n    gapi.load('client:auth2', () => {\n      gapi.client.init({\n        apiKey: 'AIzaSyCjDWzfOwgx9rbZDHj0cQ4Cnc3JoEpMKeQ',\n        clientId: '965467492625-84q4gf85n21mso8kd0uvadfulvd98q0k.apps.googleusercontent.com',\n        discoveryDocs: 'https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest',\n        scope: 'https://www.googleapis.com/auth/calendar.events'\n      });\n      gapi.client.load('calendar', 'v3');\n      gapi.auth2.getAuthInstance().signIn().then(() => {\n        var event = {\n          summary: 'Trade Event!',\n          location: location,\n          description: 'This is a trading event created on Schlepper',\n          start: {\n            dateTime: moment(date).toISOString(true)\n          },\n          end: {\n            dateTime: moment(date).add(1, 'hour').toISOString(true)\n          },\n          attendees: [{\n            email: email\n          }],\n          reminders: {\n            useDefault: false,\n            overrides: [{\n              method: 'email',\n              minutes: 24 * 60\n            }, {\n              method: 'popup',\n              minutes: 10\n            }]\n          }\n        };\n        let request = gapi.client.calendar.events.insert({\n          calendarId: 'primary',\n          resource: event\n        });\n        request.execute(event => {\n          setCalendarLink(event.htmlLink);\n        });\n      });\n    });\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(storeCurrentPosition);\n\n    function storeCurrentPosition(position) {\n      setPosition({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      });\n    }\n\n    async function getMessages() {\n      const messageArray = await apiService.getMessages(user);\n      messageArray.sort(a => a.id);\n      changeMessages(messageArray);\n    }\n\n    getMessages();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messages-container\",\n    children: [tradeStatus && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Trade Submitted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.open(calendarLink),\n        children: \"Check out your event on Google Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), !tradeStatus && trading && tradeInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Trade between \", tradeInfo.fromUser, \" & \", tradeInfo.toUser]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Trading: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: albumInfo1 === null || albumInfo1 === void 0 ? void 0 : albumInfo1.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: albumInfo1 === null || albumInfo1 === void 0 ? void 0 : albumInfo1.thumb\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"For: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: albumInfo2 === null || albumInfo2 === void 0 ? void 0 : albumInfo2.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: albumInfo2 === null || albumInfo2 === void 0 ? void 0 : albumInfo2.thumb\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Date and time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          placeholder: \"Add date...\",\n          name: \"date\",\n          className: \"info-input--date\",\n          value: date,\n          onChange: e => handleChange(e.target.value, setDate)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Location:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), position.latitude != '' && /*#__PURE__*/_jsxDEV(Map, {\n          position: position,\n          onSearchLocation: onSearchLocation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Send Trade\",\n          className: \"button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this), !tradeStatus && !trading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"incoming\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Incoming Messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), messages.map(message => {\n          if (message.toUser === user) return /*#__PURE__*/_jsxDEV(MessageMini, {\n            fromUser: message.fromUser,\n            message: message.message,\n            album: message.album,\n            offeredAlbum: message.offeredAlbum,\n            handleDelete: () => handleDelete(message),\n            handleClick: () => handleClick(message),\n            handleTrade: () => handleTrade(message)\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 19\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"outgoing\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Sent Messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this), messages.map(message => {\n          if (message.fromUser === user) return /*#__PURE__*/_jsxDEV(MessageMini, {\n            toUser: message.toUser,\n            message: message.message,\n            album: message.album,\n            offeredAlbum: message.offeredAlbum,\n            sent: true\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 19\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MessagesTab, \"nS6LczAdQuW1/PN37FQ2YOdCrxI=\", false, function () {\n  return [useAppSelector, useAppDispatch, useNavigate];\n});\n\n_c = MessagesTab;\nexport default MessagesTab;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessagesTab\");","map":{"version":3,"sources":["/mnt/c/Users/marsh/Documents/Codeworks/projects/schlepper-app/schlepper/src/components/messages/messages.tsx"],"names":["useEffect","useState","useAppSelector","useAppDispatch","changeEyedAlbum","changeViewedUser","changeOffer","useNavigate","apiService","MessageMini","gapi","moment","Map","MessagesTab","messages","changeMessages","trading","changeTrading","tradeStatus","changeTradeStatus","tradeInfo","changeTradeInfo","albumInfo1","changeAlbumInfo1","albumInfo2","changeAlbumInfo2","date","setDate","location","setLocation","calendarLink","setCalendarLink","position","setPosition","latitude","longitude","user","state","dispatch","navigate","handleChange","value","setter","onSearchLocation","e","result","place_name","handleClick","message","fromUser","album","offeredAlbum","handleDelete","deleteMessage","id","messageArray","getMessages","sort","handleTrade","info1","getAlbumInfo","info2","handleSubmit","preventDefault","tradeObject","user1","toUser","user2","user1offer","user2offer","additional","makeTrade","resUserData","getUser","username","addEventToCalendar","email","load","client","init","apiKey","clientId","discoveryDocs","scope","auth2","getAuthInstance","signIn","then","event","summary","description","start","dateTime","toISOString","end","add","attendees","reminders","useDefault","overrides","method","minutes","request","calendar","events","insert","calendarId","resource","execute","htmlLink","navigator","geolocation","getCurrentPosition","storeCurrentPosition","coords","a","window","open","title","thumb","target","map"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks';\r\nimport { changeEyedAlbum, changeViewedUser, changeOffer } from '../../redux/actions';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport apiService from '../../APIservice';\r\nimport MessageMini from '../search-minis/message-mini/message-mini';\r\nimport './messages.css';\r\nimport { Message } from '../../interfaces/Message';\r\nimport { Album } from '../../interfaces/Album';\r\nimport { gapi } from 'gapi-script';\r\nimport moment from 'moment';\r\nimport Map from '../map/map';\r\n\r\nconst MessagesTab: React.FC = () => {\r\n  //state\r\n  const [messages, changeMessages] = useState<Message[]>([]);\r\n  const [trading, changeTrading] = useState<boolean>(false);\r\n  const [tradeStatus, changeTradeStatus] = useState<boolean>(false);\r\n  const [tradeInfo, changeTradeInfo] = useState<Message | null>(null);\r\n  const [albumInfo1, changeAlbumInfo1] = useState<Album | null>(null);\r\n  const [albumInfo2, changeAlbumInfo2] = useState<Album | null>(null);\r\n  const [date, setDate] = useState<string>('');\r\n  const [location, setLocation] = useState<string>('');\r\n  const [calendarLink, setCalendarLink] = useState<string>('');\r\n  const [position, setPosition] = useState<any>({\r\n    latitude: '',\r\n    longitude: '',\r\n  });\r\n\r\n  //redux\r\n  const user = useAppSelector<string>(state => state.user);\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (value: string, setter: (value: string) => void) => {\r\n    setter(value);\r\n  };\r\n\r\n  const onSearchLocation = (e: any): void => {\r\n    setLocation(e.result.place_name);\r\n  };\r\n\r\n  //navigates to 'reply'\r\n  function handleClick(message: Message): void {\r\n    dispatch(changeViewedUser(message.fromUser));\r\n    dispatch(changeEyedAlbum(message.album));\r\n    dispatch(changeOffer(message.offeredAlbum));\r\n    navigate('/reply');\r\n  }\r\n\r\n  //deletes a message\r\n  async function handleDelete(message: Message): Promise<void> {\r\n    await apiService.deleteMessage(message.id);\r\n    const messageArray = await apiService.getMessages(user);\r\n    messageArray.sort((message: Message) => message.id);\r\n    changeMessages(messageArray);\r\n  }\r\n\r\n  //sets state to make a trade\r\n  async function handleTrade(message: Message): Promise<void> {\r\n    changeTrading(true);\r\n    changeTradeInfo(message);\r\n    const info1 = await apiService.getAlbumInfo(message.offeredAlbum);\r\n    changeAlbumInfo1(info1);\r\n    const info2 = await apiService.getAlbumInfo(message.album);\r\n    changeAlbumInfo2(info2);\r\n  }\r\n\r\n  //sends a trade offer to the server\r\n  async function handleSubmit(e: React.FormEvent<HTMLFormElement>): Promise<void> {\r\n    e.preventDefault();\r\n    const tradeObject = {\r\n      user1: tradeInfo?.toUser,\r\n      user2: tradeInfo?.fromUser,\r\n      user1offer: tradeInfo?.offeredAlbum,\r\n      user2offer: tradeInfo?.album,\r\n      location: location,\r\n      additional: date,\r\n    };\r\n    await apiService.makeTrade(tradeObject);\r\n    const resUserData = await apiService.getUser({ username: tradeInfo?.fromUser });\r\n    addEventToCalendar(resUserData.email);\r\n    changeTradeStatus(true);\r\n  }\r\n\r\n  // Ad event to Google Calendar\r\n  const addEventToCalendar = (email: string) => {\r\n    gapi.load('client:auth2', () => {\r\n      gapi.client.init({\r\n        apiKey: 'AIzaSyCjDWzfOwgx9rbZDHj0cQ4Cnc3JoEpMKeQ',\r\n        clientId:\r\n          '965467492625-84q4gf85n21mso8kd0uvadfulvd98q0k.apps.googleusercontent.com',\r\n        discoveryDocs: 'https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest',\r\n        scope: 'https://www.googleapis.com/auth/calendar.events',\r\n      });\r\n      gapi.client.load('calendar', 'v3');\r\n      gapi.auth2\r\n        .getAuthInstance()\r\n        .signIn()\r\n        .then(() => {\r\n          var event = {\r\n            summary: 'Trade Event!',\r\n            location: location,\r\n            description: 'This is a trading event created on Schlepper',\r\n            start: {\r\n              dateTime: moment(date).toISOString(true),\r\n            },\r\n            end: {\r\n              dateTime: moment(date).add(1, 'hour').toISOString(true),\r\n            },\r\n            attendees: [{ email: email }],\r\n            reminders: {\r\n              useDefault: false,\r\n              overrides: [\r\n                { method: 'email', minutes: 24 * 60 },\r\n                { method: 'popup', minutes: 10 },\r\n              ],\r\n            },\r\n          };\r\n          let request = gapi.client.calendar.events.insert({\r\n            calendarId: 'primary',\r\n            resource: event,\r\n          });\r\n          request.execute((event: any) => {\r\n            setCalendarLink(event.htmlLink);\r\n          });\r\n        });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(storeCurrentPosition);\r\n    function storeCurrentPosition(position: any) {\r\n      setPosition({\r\n        latitude: position.coords.latitude,\r\n        longitude: position.coords.longitude,\r\n      });\r\n    }\r\n    async function getMessages(): Promise<void> {\r\n      const messageArray = await apiService.getMessages(user);\r\n      messageArray.sort((a: Message) => a.id);\r\n      changeMessages(messageArray);\r\n    }\r\n    getMessages();\r\n  }, []);\r\n\r\n  return (\r\n    <div className='messages-container'>\r\n      {tradeStatus && (\r\n        <>\r\n          <h1>Trade Submitted</h1>\r\n          <button onClick={() => window.open(calendarLink)}>\r\n            Check out your event on Google Calendar\r\n          </button>\r\n        </>\r\n      )}\r\n      {!tradeStatus && trading && tradeInfo && (\r\n        <div>\r\n          <h2>\r\n            Trade between {tradeInfo.fromUser} & {tradeInfo.toUser}\r\n          </h2>\r\n          <h2>Trading: </h2>\r\n          <h3>{albumInfo1?.title}</h3>\r\n          <img src={albumInfo1?.thumb} />\r\n          <h2>For: </h2>\r\n          <h3>{albumInfo2?.title}</h3>\r\n          <img src={albumInfo2?.thumb} />\r\n          <form onSubmit={handleSubmit}>\r\n            <h3>Date and time:</h3>\r\n            <input\r\n              type='datetime-local'\r\n              placeholder='Add date...'\r\n              name='date'\r\n              className='info-input--date'\r\n              value={date}\r\n              onChange={e => handleChange(e.target.value, setDate)}\r\n            />\r\n            <h2>Location:</h2>\r\n            {position.latitude != '' && (\r\n              <Map position={position} onSearchLocation={onSearchLocation} />\r\n            )}\r\n            <input type='submit' value='Send Trade' className='button' />\r\n          </form>\r\n        </div>\r\n      )}\r\n      {!tradeStatus && !trading && (\r\n        <div>\r\n          <div className='incoming'>\r\n            <h1>Incoming Messages</h1>\r\n            {messages.map(message => {\r\n              if (message.toUser === user)\r\n                return (\r\n                  <MessageMini\r\n                    key={message.id}\r\n                    fromUser={message.fromUser}\r\n                    message={message.message}\r\n                    album={message.album}\r\n                    offeredAlbum={message.offeredAlbum}\r\n                    handleDelete={() => handleDelete(message)}\r\n                    handleClick={() => handleClick(message)}\r\n                    handleTrade={() => handleTrade(message)}\r\n                  />\r\n                );\r\n            })}\r\n          </div>\r\n          <div className='outgoing'>\r\n            <h1>Sent Messages</h1>\r\n            {messages.map(message => {\r\n              if (message.fromUser === user)\r\n                return (\r\n                  <MessageMini\r\n                    key={message.id}\r\n                    toUser={message.toUser}\r\n                    message={message.message}\r\n                    album={message.album}\r\n                    offeredAlbum={message.offeredAlbum}\r\n                    sent={true}\r\n                  />\r\n                );\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessagesTab;\r\n"]},"metadata":{},"sourceType":"module"}