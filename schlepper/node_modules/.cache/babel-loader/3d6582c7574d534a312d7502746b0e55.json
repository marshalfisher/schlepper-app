{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/marsh/Documents/Codeworks/projects/schlepper-app/schlepper/src/login/login.js\";\nimport { authFalse, authTrue, changeUser, changePass } from '../actions';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Login(_ref) {\n  let {\n    user,\n    password,\n    changeUser,\n    changePass\n  } = _ref;\n\n  async function logAttempt(userObject) {\n    return fetch(`http://localhost:3001/login`, {\n      method: 'POST',\n      credentials: 'include',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userObject)\n    }).then(res => res.json()).catch(err => console.log(err));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n          const result = logAttempt({\n            user: user.user,\n            password: password.password\n          });\n          console.log(result);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Username\",\n          name: \"username\",\n          value: user.user,\n          onChange: e => {\n            changeUser(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Password\",\n          name: \"password\",\n          onChange: e => {\n            changePass(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Log In\",\n          className: \"button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n} //map state\n\n\n_c = Login;\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth,\n    user: state.user,\n    password: state.password\n  };\n}; // map dispatch\n\n\nconst mapDispatchToProps = dispatch => ({\n  authTrue: () => dispatch(authTrue()),\n  authFalse: () => dispatch(authFalse()),\n  changeUser: text => dispatch(changeUser(text)),\n  changePass: text => dispatch(changePass(text))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/mnt/c/Users/marsh/Documents/Codeworks/projects/schlepper-app/schlepper/src/login/login.js"],"names":["authFalse","authTrue","changeUser","changePass","connect","Login","user","password","logAttempt","userObject","fetch","method","credentials","mode","headers","body","JSON","stringify","then","res","json","catch","err","console","log","e","preventDefault","result","target","value","mapStateToProps","state","auth","mapDispatchToProps","dispatch","text"],"mappings":"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","sourcesContent":["import { authFalse, authTrue, changeUser, changePass } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nfunction Login ({user, password, changeUser, changePass}) {\r\n\r\n    async function logAttempt(userObject) {\r\n        return fetch(`http://localhost:3001/login`, {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            mode: 'cors',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(userObject),\r\n          })\r\n            .then((res) => res.json())\r\n            .catch((err) => console.log(err));\r\n    } \r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"login\">\r\n                <h2>Log In</h2>\r\n                <form onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    const result = logAttempt({user: user.user, password: password.password})\r\n                    console.log(result)\r\n                    }\r\n                }>\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"Username\"\r\n                      name=\"username\"\r\n                      value={user.user}\r\n                      onChange={(e) => {\r\n                          changeUser(e.target.value)\r\n                        }\r\n                    }\r\n                    />\r\n                    <input\r\n                      type=\"password\"\r\n                      placeholder=\"Password\"\r\n                      name=\"password\"\r\n                      onChange={(e) => {\r\n                        changePass(e.target.value)\r\n                      }}\r\n                    />\r\n                    <input type=\"submit\" value=\"Log In\" className=\"button\"/>\r\n               </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//map state\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      auth: state.auth,\r\n      user: state.user,\r\n      password: state.password\r\n    };\r\n  };\r\n  \r\n  // map dispatch\r\n  const mapDispatchToProps = (dispatch) => ({\r\n    authTrue: () => dispatch(authTrue()),\r\n    authFalse: () => dispatch(authFalse()),\r\n    changeUser: (text) => dispatch(changeUser(text)),\r\n    changePass: (text) => dispatch(changePass(text))\r\n  });\r\n  \r\n  export default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(Login);"]},"metadata":{},"sourceType":"module"}