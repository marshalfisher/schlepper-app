{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = process.env.REACT_APP_BACKEND_URL;\nconsole.log(BASE_URL);\nconst apiService = {}; //logs user in\n\napiService.login = userObject => {\n  return fetch(`${BASE_URL}/login`, {\n    method: 'POST',\n    credentials: 'include',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userObject)\n  }).then(res => res.json()).catch(err => console.log(err));\n}; //creates a new user\n\n\napiService.createUser = userObject => {\n  return fetch(`${BASE_URL}/new`, {\n    method: 'POST',\n    credentials: 'include',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userObject)\n  }).then(res => res.json()).catch(err => console.log(err));\n}; //get album info from Discogs API\n\n\napiService.getAlbumInfo = id => {\n  const sureString = String(id);\n  return fetch(`${BASE_URL}/callAPI`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      id: sureString\n    })\n  }).then(res => res.json()).catch(err => console.log(err));\n}; //searches the api\n\n\napiService.search = (query, type) => {\n  const queryObject = {\n    query: String(query),\n    type: String(type)\n  };\n  return fetch(`${BASE_URL}/searchAPI`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(queryObject)\n  }).then(res => res.json()).catch(err => console.log(err));\n}; //removes album from collection\n\n\napiService.removeCollection = object => {\n  //object should look like {id: * record ID*, user: *username*}\n  return fetch(`${BASE_URL}/deleteCollection`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(object)\n  }).then(res => res.json()).catch(err => console.log(err));\n}; //removes item from want list\n\n\napiService.removeWant = object => {\n  //object should look like {id: * record ID*, user: *username*}\n  return fetch(`${BASE_URL}/deleteWant`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(object)\n  }).then(res => res.json()).catch(err => console.log(err));\n}; //add 1 item to user's collection\n\n\napiService.addCollection = object => {\n  return fetch(`${BASE_URL}/addCollection`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(object)\n  }).then(res => res.json()).catch(err => console.log(err));\n}; //adds 1 item to user's want list\n\n\napiService.addWant = object => {\n  return fetch(`${BASE_URL}/addWant`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(object)\n  }).then(res => res.json()).catch(err => console.log(err));\n}; //finds users with trades in an area\n\n\napiService.findTrades = area => {\n  return fetch(`${BASE_URL}/findTrades`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      area: area\n    })\n  }).then(res => res.json()).catch(err => console.log(err));\n}; //gets user info to display profile\n\n\napiService.getUser = userID => {\n  return fetch(`${BASE_URL}/getUser`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userID)\n  }).then(res => res.json()).catch(err => console.log(err));\n}; //sends image to server\n\n\napiService.sendImage = image => {\n  const fd = new FormData();\n  fd.append('image', image);\n  axios.post(`${BASE_URL}/sendImage`, fd, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }).catch(err => console.log(err));\n}; //updates user details\n\n\napiService.updateUser = (username, value, newValue) => {\n  const updateObject = {\n    username,\n    value,\n    newValue\n  };\n  return fetch(`${BASE_URL}/updateUser`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updateObject)\n  }) // .then(res => res.json())\n  .catch(e => console.log(e));\n}; //sends a message\n\n\napiService.sendMessage = messageObject => {\n  return fetch(`${BASE_URL}/sendMessage`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(messageObject)\n  }).catch(e => console.log(e));\n}; //gets messages\n\n\napiService.getMessages = user => {\n  return fetch(`${BASE_URL}/getMessages`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      user\n    })\n  }).then(res => res.json()).catch(e => console.log(e));\n}; //deletes messages \n\n\napiService.deleteMessage = id => {\n  return fetch(`${BASE_URL}/deleteMessage`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      id\n    })\n  }).then(res => res.json()).catch(e => console.log(e));\n}; //gets users's trades\n\n\napiService.getTrades = user => {\n  //user\n  return fetch(`${BASE_URL}/getTrades`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      user\n    })\n  }).then(res => res.json()).catch(err => console.log(err));\n}; //adds trade to database\n\n\napiService.makeTrade = object => {\n  //user1, user2, offer1, offer2, location, additional\n  return fetch(`${BASE_URL}/makeTrade`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(object)\n  }).then(res => res.json()).catch(err => console.log(err));\n}; //deletes trade from database \n\n\napiService.deleteTrade = id => {\n  //id\n  return fetch(`${BASE_URL}/deleteTrade`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      id\n    })\n  }).then(res => res.json()).catch(err => console.log(err));\n};\n\nexport default apiService;","map":{"version":3,"sources":["/mnt/c/Users/marsh/Documents/Codeworks/projects/schlepper-app/schlepper/src/APIservice.js"],"names":["axios","BASE_URL","process","env","REACT_APP_BACKEND_URL","console","log","apiService","login","userObject","fetch","method","credentials","mode","headers","body","JSON","stringify","then","res","json","catch","err","createUser","getAlbumInfo","id","sureString","String","search","query","type","queryObject","removeCollection","object","removeWant","addCollection","addWant","findTrades","area","getUser","userID","sendImage","image","fd","FormData","append","post","updateUser","username","value","newValue","updateObject","e","sendMessage","messageObject","getMessages","user","deleteMessage","getTrades","makeTrade","deleteTrade"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nconst BASE_URL = process.env.REACT_APP_BACKEND_URL;\r\nconsole.log(BASE_URL)\r\n\r\nconst apiService = {};\r\n//logs user in\r\napiService.login = (userObject) => {\r\n  return fetch(`${BASE_URL}/login`, {\r\n    method: 'POST',\r\n    credentials: 'include',\r\n    mode: 'cors',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(userObject),\r\n  })\r\n    .then(res => res.json())\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\n//creates a new user\r\napiService.createUser = (userObject) => {\r\n  return fetch(`${BASE_URL}/new`, {\r\n    method: 'POST',\r\n    credentials: 'include',\r\n    mode: 'cors',\r\n    headers: { \r\n      'Content-Type': 'application/json',\r\n    },\r\n      body: JSON.stringify(userObject),\r\n    })\r\n      .then(res => res.json())\r\n      .catch((err) => console.log(err));\r\n};\r\n\r\n//get album info from Discogs API\r\napiService.getAlbumInfo = (id) => {\r\n  const sureString = String(id);\r\n  return fetch(`${BASE_URL}/callAPI`, {\r\n    method: 'POST',\r\n    headers: { \r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({id: sureString})\r\n  })\r\n  .then(res => res.json())\r\n  .catch((err) => console.log(err));\r\n};\r\n\r\n//searches the api\r\napiService.search = (query, type) => {\r\n  const queryObject = {\r\n    query: String(query),\r\n    type: String(type)\r\n  }\r\n  return fetch(`${BASE_URL}/searchAPI`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(queryObject)\r\n  })\r\n  .then(res => res.json())\r\n  .catch((err)=> console.log(err));\r\n};\r\n\r\n//removes album from collection\r\napiService.removeCollection = (object) =>{\r\n  //object should look like {id: * record ID*, user: *username*}\r\n  return fetch(`${BASE_URL}/deleteCollection`, {\r\n    method: 'DELETE',\r\n    headers: { \r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(object)\r\n  })\r\n  .then(res => res.json())\r\n  .catch((err) => console.log(err));\r\n};\r\n\r\n//removes item from want list\r\napiService.removeWant = (object) =>{\r\n  //object should look like {id: * record ID*, user: *username*}\r\n  return fetch(`${BASE_URL}/deleteWant`, {\r\n    method: 'DELETE',\r\n    headers: { \r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(object)\r\n  })\r\n  .then(res => res.json())\r\n  .catch((err) => console.log(err));\r\n};\r\n\r\n//add 1 item to user's collection\r\napiService.addCollection = (object) => {\r\n  return fetch(`${BASE_URL}/addCollection`, {\r\n    method: 'POST',\r\n    headers : {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(object)\r\n  })\r\n  .then(res => res.json())\r\n  .catch((err) => console.log(err))\r\n};\r\n\r\n//adds 1 item to user's want list\r\napiService.addWant = (object) => {\r\n  return fetch(`${BASE_URL}/addWant`, {\r\n    method: 'POST',\r\n    headers : {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(object)\r\n  })\r\n  .then(res => res.json())\r\n  .catch((err) => console.log(err))\r\n};\r\n\r\n//finds users with trades in an area\r\napiService.findTrades = (area) => {\r\n  return fetch(`${BASE_URL}/findTrades`, {\r\n    method: 'POST',\r\n    headers : {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({area: area})\r\n  })\r\n  .then(res => res.json())\r\n  .catch((err) => console.log(err));\r\n};\r\n\r\n//gets user info to display profile\r\napiService.getUser = (userID) => {\r\n  return fetch(`${BASE_URL}/getUser`, {\r\n    method: 'POST',\r\n    headers : {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(userID)\r\n  })\r\n  .then(res => res.json())\r\n  .catch((err) => console.log(err));\r\n};\r\n\r\n//sends image to server\r\napiService.sendImage = (image) => {\r\n  const fd= new FormData();\r\n  fd.append('image', image)\r\n  axios.post(`${BASE_URL}/sendImage`, fd, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data'\r\n    },\r\n  })\r\n  .catch((err) => console.log(err))\r\n};\r\n\r\n//updates user details\r\napiService.updateUser = (username, value, newValue) => {\r\n  const updateObject = {username, value, newValue}\r\n  return fetch(`${BASE_URL}/updateUser`,{\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(updateObject)\r\n  })\r\n  // .then(res => res.json())\r\n  .catch(e => console.log(e));\r\n};\r\n\r\n//sends a message\r\napiService.sendMessage = (messageObject) => {\r\n  return fetch(`${BASE_URL}/sendMessage`,{\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(messageObject)\r\n  })\r\n  .catch(e => console.log(e));\r\n};\r\n\r\n//gets messages\r\napiService.getMessages = (user) => {\r\n  return fetch(`${BASE_URL}/getMessages`,{\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({user})\r\n  })\r\n  .then(res => res.json())\r\n  .catch(e => console.log(e));\r\n};\r\n\r\n//deletes messages \r\napiService.deleteMessage = (id) => {\r\n  return fetch(`${BASE_URL}/deleteMessage` ,{\r\n    method: 'DELETE',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({id})\r\n  })\r\n  .then(res => res.json())\r\n  .catch(e => console.log(e))\r\n};\r\n\r\n//gets users's trades\r\napiService.getTrades = (user) => {\r\n  //user\r\n  return fetch(`${BASE_URL}/getTrades` , {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({user})\r\n  })\r\n  .then(res => res.json())\r\n  .catch(err => console.log(err))\r\n};\r\n\r\n//adds trade to database\r\napiService.makeTrade = (object) => {\r\n  //user1, user2, offer1, offer2, location, additional\r\n  return fetch(`${BASE_URL}/makeTrade`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(object)\r\n  })\r\n  .then(res => res.json())\r\n  .catch(err => console.log(err))\r\n};\r\n\r\n//deletes trade from database \r\napiService.deleteTrade = (id) => {\r\n  //id\r\n  return fetch(`${BASE_URL}/deleteTrade`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({id})\r\n  })\r\n  .then(res => res.json())\r\n  .catch(err => console.log(err))\r\n};\r\n\r\nexport default apiService;"]},"metadata":{},"sourceType":"module"}